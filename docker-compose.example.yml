version: '3.8'

services:
  trailcommand-web:
    build: .
    ports:
      - "3000:80"
    environment:
      # API Configuration
      - API_HOST=trailcommand-api
      - API_PORT=3001
      - API_PROTOCOL=http

      # Application Settings
      - APP_NAME=TrailCommand Pro
      - APP_VERSION=1.0.0

      # UI Configuration
      - DEFAULT_THEME=light
      - SHOW_SERVER_CONFIG=false

      # Polling Intervals (milliseconds)
      - SENSOR_INTERVAL=5000
      - CONNECTION_CHECK_INTERVAL=60000

      # Socket Configuration
      - SOCKET_TIMEOUT=20000
      - SOCKET_RECONNECT_ATTEMPTS=3
      - SOCKET_RECONNECT_DELAY=1000

      # Security
      - ADMIN_ROLES=admin,superuser

      # Features
      - ENABLE_DEVICE_MANAGEMENT=true
      - ENABLE_WIDGET_CUSTOMIZATION=true
      - ENABLE_REALTIME_UPDATES=true
      - ENABLE_DATA_EXPORT=true
    depends_on:
      - trailcommand-api
    networks:
      - trailcommand-network

  trailcommand-api:
    build: ./trailcommand-api
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - NODE_ENV=production
      - CORS_ORIGIN=http://localhost:3000
      - SOCKET_CORS_ORIGIN=http://localhost:3000
    networks:
      - trailcommand-network

networks:
  trailcommand-network:
    driver: bridge

# Example usage:
# 1. Copy this file to docker-compose.yml
# 2. Customize environment variables as needed
# 3. Run: docker-compose up -d
#
# For production deployment:
# 1. Set API_HOST to your actual API server hostname/IP
# 2. Configure proper SSL/TLS (set API_PROTOCOL=https)
# 3. Use environment-specific values
# 4. Consider using Docker secrets for sensitive data